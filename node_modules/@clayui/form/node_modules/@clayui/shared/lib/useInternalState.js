"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useInternalState = useInternalState;

var _react = require("react");

var _warning = _interopRequireDefault(require("warning"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function useInternalState(_ref) {
  var defaultName = _ref.defaultName,
      defaultValue = _ref.defaultValue,
      handleName = _ref.handleName,
      name = _ref.name,
      onChange = _ref.onChange,
      value = _ref.value;

  var _useState = (0, _react.useState)(defaultValue !== null && defaultValue !== void 0 ? defaultValue : value),
      _useState2 = _slicedToArray(_useState, 2),
      internalValue = _useState2[0],
      setInternalValue = _useState2[1];

  "production" !== "production" ? (0, _warning.default)(!(typeof value === 'undefined' && typeof onChange !== 'undefined'), "A component is changing a controlled ".concat(name, " to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled '").concat(name, "' prop for the lifetime of the component.")) : void 0;
  "production" !== "production" ? (0, _warning.default)(!(typeof onChange === 'undefined' && typeof value !== 'undefined'), "You provided a '".concat(name, "' prop for a component without a handler '").concat(handleName, "'. This will render the component with an internal state, if the component is to be uncontrolled, use '").concat(defaultName, "'. Otherwise, set the '").concat(handleName, "' handler.")) : void 0;
  var isUncontrolled = typeof value === 'undefined' || typeof onChange === 'undefined';

  if (isUncontrolled) {
    value = internalValue;
    onChange = setInternalValue;
  }

  return [value, onChange, isUncontrolled];
}