"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2017 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isStartEjected = exports.getStartDir = exports.getSupportedLocales = exports.getWebpackProxy = exports.getWebpackPort = exports.getWebpackExtensions = exports.getWebpackRules = exports.getWebpackMainModule = exports.getTranslatorTextKey = exports.getLiferayDir = void 0;
const dot_prop_1 = __importDefault(require("dot-prop"));
const project_1 = __importDefault(require("liferay-npm-build-tools-common/lib/project"));
const read_json_sync_1 = __importDefault(require("read-json-sync"));
let npmbuildrc = {};
let npmbundlerrc = {};
loadConfig();
/**
 * Load project configuration
 */
function loadConfig() {
    npmbuildrc = safeReadJsonSync(project_1.default.dir.join('.npmbuildrc').asNative);
    npmbundlerrc = project_1.default._npmbundlerrc;
    // Normalize configurations
    normalize(npmbuildrc, 'start', {
        ejected: false,
        dir: project_1.default.dir.join('.webpack').asPosix,
    });
    normalize(npmbuildrc, 'supportedLocales', []);
    normalize(npmbuildrc, 'webpack.mainModule', 'index.js');
    normalize(npmbuildrc, 'webpack.rules', []);
    normalize(npmbuildrc, 'webpack.extensions', ['.js']);
    normalize(npmbuildrc, 'webpack.port', null);
    normalize(npmbuildrc, 'webpack.proxy', {});
    normalize(npmbundlerrc, 'create-jar.features.localization', 'features/localization/Language');
}
/**
 * Get the path to the local installation of Liferay (if any).
 * @return {string|undefined}
 */
function getLiferayDir() {
    return npmbuildrc.liferayDir;
}
exports.getLiferayDir = getLiferayDir;
/**
 * Get the Microsoft Translator credentials
 * @return {string|undefined}
 */
function getTranslatorTextKey() {
    return npmbuildrc.translatorTextKey;
}
exports.getTranslatorTextKey = getTranslatorTextKey;
/**
 * Get the main module path to be used when building with webpack.
 * @return {string}
 */
function getWebpackMainModule() {
    return npmbuildrc.webpack.mainModule;
}
exports.getWebpackMainModule = getWebpackMainModule;
/**
 * Get the webpack rules to use.
 * @return {Array}
 */
function getWebpackRules() {
    return npmbuildrc.webpack.rules;
}
exports.getWebpackRules = getWebpackRules;
/**
 * Get the webpack extensions to use.
 * @return {Object}
 */
function getWebpackExtensions() {
    return npmbuildrc.webpack.extensions;
}
exports.getWebpackExtensions = getWebpackExtensions;
/**
 * Get the webpack port to use.
 * @return {number}
 */
function getWebpackPort() {
    return npmbuildrc.webpack.port;
}
exports.getWebpackPort = getWebpackPort;
/**
 * Get the webpack proxy to use.
 * @return {Object}
 */
function getWebpackProxy() {
    return npmbuildrc.webpack.proxy;
}
exports.getWebpackProxy = getWebpackProxy;
/**
 * Get the list of supported locales
 * @return {Array<string>}
 */
function getSupportedLocales() {
    return npmbuildrc.supportedLocales;
}
exports.getSupportedLocales = getSupportedLocales;
/**
 * Get the `npm run start` webpack's directory
 * @return {string}
 */
function getStartDir() {
    return npmbuildrc.start.dir;
}
exports.getStartDir = getStartDir;
/**
 * Check if `npm run start` configuration was ejected
 * @return {boolean}
 */
function isStartEjected() {
    return npmbuildrc.start.ejected;
}
exports.isStartEjected = isStartEjected;
/**
 * Set a property in a configuration object if it doesn't exist
 * @param {object} cfg
 * @param {string} propPath
 * @param {*} value
 */
function normalize(cfg, propPath, value) {
    if (!dot_prop_1.default.has(cfg, propPath)) {
        dot_prop_1.default.set(cfg, propPath, value);
    }
}
/**
 * Read a JSON file without failure if it doesn't exist.
 * @param {string} path
 * @return {object}
 */
function safeReadJsonSync(path) {
    try {
        return read_json_sync_1.default(path);
    }
    catch (err) {
        if (err.code !== 'ENOENT') {
            throw err;
        }
    }
}
