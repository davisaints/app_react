"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2017 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const format_1 = require("liferay-npm-build-tools-common/lib/format");
const project_1 = __importDefault(require("liferay-npm-build-tools-common/lib/project"));
const probe_1 = require("liferay-npm-build-tools-common/lib/project/probe");
const path_1 = __importDefault(require("path"));
const resolve_1 = __importDefault(require("resolve"));
const semver_1 = __importDefault(require("semver"));
const util_1 = require("../../util");
const msg = {
    unsupportedProjectType: [
        format_1.error `
		Oops! Your project type is not supported by {Liferay JS Toolkit} or 
		cannot be autodetected.
		`,
        format_1.info `
		Please visit https://github.com/liferay/liferay-frontend-projects/tree/master/maintenance/projects/js-toolkit/docs 
		for the full list of supported project types and how they are detected.
		`,
    ],
};
const scrLiferayDir = project_1.default.dir.join('src.liferay');
function default_1() {
    switch (project_1.default.probe.type) {
        case probe_1.ProjectType.ANGULAR_CLI:
            buildWith('build', ['--prod=true']);
            break;
        case probe_1.ProjectType.CREATE_REACT_APP:
            checkReactScriptsVersion(project_1.default.dir);
            buildWith('build');
            break;
        case probe_1.ProjectType.VUE_CLI:
            checkVueCliServiceVersion(project_1.default.dir);
            buildWith('build', ['--prod=true']);
            break;
        default:
            format_1.print(msg.unsupportedProjectType);
            process.exit(1);
    }
}
exports.default = default_1;
/**
 * @param {string} script
 * @param {Array<*>} args
 */
function buildWith(script, args = []) {
    util_1.runPkgJsonScript(script, args);
    try {
        const templatesPath = path_1.default.join(__dirname, '..', '..', 'resources', 'build', project_1.default.probe.type);
        const renderer = new util_1.Renderer(templatesPath, scrLiferayDir.asNative);
        renderer.render('adapt-rt.js', {
            project: project_1.default,
        });
        const splitFile = fs_extra_1.default
            .readdirSync(project_1.default.dir.join('build', 'static', 'js').asNative)
            .filter((fileName) => fileName.endsWith('.chunk.js'))[0];
        const splitId = splitFile.split('.')[0];
        renderer.render('index.js', {
            project: project_1.default,
            splitId,
        });
        util_1.runNodeModulesBin('liferay-npm-bundler');
    }
    finally {
        fs_extra_1.default.removeSync(scrLiferayDir.asNative);
    }
}
function checkReactScriptsVersion(projectDir) {
    const pkgJsonPath = resolve_1.default.sync('react-scripts/package.json', {
        basedir: projectDir.asNative,
    });
    const pkgJson = require(pkgJsonPath);
    const version = pkgJson.version;
    if (!semver_1.default.satisfies(version, '^5.0.0')) {
        format_1.print('', format_1.warn `
The adaptation process is currently designed to be used with {react-scripts}
version {5.x} series but your project is using version {${version}}. Be aware that
this may make adaptation fail.
`);
    }
}
function checkVueCliServiceVersion(projectDir) {
    const pkgJsonPath = resolve_1.default.sync('@vue/cli-service/package.json', {
        basedir: projectDir.asNative,
    });
    const pkgJson = require(pkgJsonPath);
    const version = pkgJson.version;
    if (!semver_1.default.satisfies(version, '^4.0.0')) {
        format_1.print('', format_1.warn `
The adaptation process is currently designed to be used with {@vue/cli-service}
version {4.x} series but your project is using version {${version}}. Be aware that
this may make adaptation fail.
`);
    }
}
