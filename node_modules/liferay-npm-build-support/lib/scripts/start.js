"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2017 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = __importDefault(require("child_process"));
const fs_1 = __importDefault(require("fs"));
const file_path_1 = __importDefault(require("liferay-npm-build-tools-common/lib/file-path"));
const format_1 = require("liferay-npm-build-tools-common/lib/format");
const project_1 = __importDefault(require("liferay-npm-build-tools-common/lib/project"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const read_json_sync_1 = __importDefault(require("read-json-sync"));
const util_1 = __importDefault(require("util"));
const cfg = __importStar(require("../config"));
const util_2 = require("../util");
const templatesDir = path_1.default.join(__dirname, '..', 'resources', 'start');
const webpackDir = new file_path_1.default(cfg.getStartDir(), { posix: true });
const pkgJson = project_1.default.pkgJson;
const msg = {
    alreadyEjected: [
        '',
        format_1.error `
		The {npm run start} configuration has already been ejected!
		`,
        `
		No modifications have been done to any project file.
		`,
    ],
    ejectFinished: [
        format_1.success `
		The {npm run start} configuration has been successfully ejected.
		`,
    ],
    ejectWarning: [
        '',
        format_1.warn `
		You have decided to {eject} the {npm run start} configuration.
		`,
        `
		This will regenerate your webpack config for the last time, and leave it 
		in the {.webpack} directory so that you can manually configure and tweak 
		it.

		The {.webpack} directory will be removed from {.gitignore} if it exists 
		in the project folder. If the project does not have a {.gitignore} file, 
		don't forget to modify the correct {.gitignore} file yourself.

		The {eject} process will also write (in your {.npmbuildrc} file) that an
		{eject} was performed, remove your {webpack} configuration, and 
		configure {.webpack} as the work directory of the {npm run start} task.

		After that, you can change the name of the {.webpack} folder (updating 
		the {.npmbuildrc} accordingly) if desired.
		`,
    ],
};
/**
 *
 */
function default_1() {
    if (!cfg.isStartEjected()) {
        copyWebpackResources();
    }
    if (process.argv[2] === 'eject') {
        eject();
        return;
    }
    runWebpackDevServer();
}
exports.default = default_1;
function eject() {
    if (cfg.isStartEjected()) {
        format_1.print(msg.alreadyEjected);
        return;
    }
    format_1.print(msg.ejectWarning);
    const npmbuildrcPath = project_1.default.dir.join('.npmbuildrc').asNative;
    let npmbuildrc = {};
    if (fs_1.default.existsSync(npmbuildrcPath)) {
        npmbuildrc = read_json_sync_1.default(npmbuildrcPath);
    }
    delete npmbuildrc.webpack;
    npmbuildrc.start = {
        dir: '.webpack',
        ejected: true,
    };
    fs_1.default.writeFileSync(project_1.default.dir.join('.npmbuildrc').asNative, JSON.stringify(npmbuildrc, null, '\t'), 'utf8');
    const gitignorePath = project_1.default.dir.join('.gitignore').asNative;
    if (fs_1.default.existsSync(gitignorePath)) {
        const gitignore = fs_1.default
            .readFileSync(gitignorePath, 'utf8')
            .split('\n')
            .filter((line) => !line.includes('.webpack/'))
            .join('\n');
        fs_1.default.writeFileSync(gitignorePath, gitignore, 'utf8');
    }
    format_1.print(msg.ejectFinished);
}
/**
 *
 */
function copyWebpackResources() {
    const renderer = new util_2.Renderer(templatesDir, webpackDir.asNative);
    renderer.render('index.html', {
        pkgName: pkgJson.name,
        pkgVersion: pkgJson.version,
        cssPath: getCssPath(pkgJson),
    });
    renderer.render('index.js', {
        mainModule: `../src/${cfg.getWebpackMainModule()}`,
    });
    renderer.render('webpack.config.js', {
        pkgName: pkgJson.name,
        port: cfg.getWebpackPort(),
        proxy: util_1.default.inspect(cfg.getWebpackProxy()),
        rules: util_1.default.inspect(cfg.getWebpackRules().map((rule) => {
            rule.test = new RegExp(rule.test);
            return rule;
        })),
        extensions: util_1.default.inspect(cfg.getWebpackExtensions()),
    });
}
/**
 * Get the portlet's CSS path from package.json
 * @return {string}
 */
function getCssPath() {
    if (!pkgJson['portlet'] ||
        !pkgJson['portlet']['com.liferay.portlet.header-portlet-css']) {
        return undefined;
    }
    let path = pkgJson['portlet']['com.liferay.portlet.header-portlet-css'];
    if (path.charAt(0) !== '/') {
        path = `/${path}`;
    }
    return path;
}
/**
 *
 */
function runWebpackDevServer() {
    let proc;
    if (os_1.default.platform() === 'win32') {
        const webpackDevServerPath = path_1.default.resolve(project_1.default.dir.join('node_modules', '.bin', 'webpack-dev-server.cmd')
            .asNative);
        proc = child_process_1.default.spawn(webpackDevServerPath, [], {
            cwd: webpackDir.asNative,
            shell: true,
        });
    }
    else {
        const webpackDevServerPath = path_1.default.resolve(project_1.default.dir.join('node_modules', '.bin', 'webpack-dev-server')
            .asNative);
        proc = child_process_1.default.spawn(process.execPath, [webpackDevServerPath], {
            cwd: webpackDir.asNative,
        });
    }
    proc.stdout.on('data', (data) => {
        console.log(data.toString());
    });
    proc.stderr.on('data', (data) => {
        console.error(data.toString());
    });
}
