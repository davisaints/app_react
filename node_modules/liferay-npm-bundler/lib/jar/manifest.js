"use strict";
/**
 * SPDX-FileCopyrightText: Â© 2017 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: LGPL-3.0-or-later
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const project_1 = __importDefault(require("liferay-npm-build-tools-common/lib/project"));
const osgi = __importStar(require("./osgi"));
const FORBIDDEN_CUSTOM_HEADERS = new Set([
    'Bundle-ManifestVersion',
    'Bundle-Name',
    'Bundle-SymbolicName',
    'Bundle-Version',
    'Manifest-Version',
    'Provide-Capability',
    'Require-Capability',
    'Tool',
    'Web-ContextPath',
]);
class Manifest {
    constructor() {
        this._provideCapabilities = {};
        this._requireCapabilities = {};
        this._customHeaders = {};
    }
    set bundleSymbolicName(bundleSymbolicName) {
        if (this._bundleSymbolicName) {
            throw new Error('BundleSymbolicName can only be set once');
        }
        this._bundleSymbolicName = bundleSymbolicName;
    }
    set bundleVersion(bundleVersion) {
        if (this._bundleVersion) {
            throw new Error('BundleVersion can only be set once');
        }
        this._bundleVersion = osgi.getBundleVersionAndClassifier(bundleVersion);
    }
    set bundleName(bundleName) {
        if (this._bundleName) {
            throw new Error('BundleName can only be set once');
        }
        this._bundleName = bundleName;
    }
    set webContextPath(webContextPath) {
        if (this._webContextPath) {
            throw new Error('WebContextPath can only be set once');
        }
        this._webContextPath = webContextPath;
    }
    addProvideCapability(key, value) {
        if (this._provideCapabilities[key]) {
            throw new Error(`ProvideCapability[${key}] can only be set once`);
        }
        this._provideCapabilities[key] = value;
    }
    addRequireCapability(key, filter) {
        if (this._requireCapabilities[key]) {
            throw new Error(`RequireCapability[${key}] can only be set once`);
        }
        this._requireCapabilities[key] = `filter:="${filter}"`;
    }
    addCustomHeader(key, value) {
        if (FORBIDDEN_CUSTOM_HEADERS.has(key)) {
            throw new Error(`Key ${key} cannot be used as a custom header`);
        }
        if (this._customHeaders[key]) {
            throw new Error(`CustomHeader[${key}] can only be set once`);
        }
        this._customHeaders[key] = value;
    }
    get content() {
        const { version } = project_1.default.versionsInfo.get('liferay-npm-bundler');
        let content = '';
        content += header('Manifest-Version', '1.0');
        content += header('Bundle-ManifestVersion', '2');
        content += header('Bundle-Name', this._bundleName);
        content += header('Bundle-SymbolicName', this._bundleSymbolicName);
        content += header('Bundle-Version', this._bundleVersion);
        content += capabilities('Provide-Capability', this._provideCapabilities);
        content += capabilities('Require-Capability', this._requireCapabilities);
        content += header('Tool', `liferay-npm-bundler-${version}`);
        content += header('Web-ContextPath', this._webContextPath);
        Object.entries(this._customHeaders).forEach(([key, value]) => {
            content += header(key, value);
        });
        return content;
    }
}
exports.default = Manifest;
function capabilities(header, capabilities) {
    const entries = Object.entries(capabilities);
    if (!entries.length) {
        return '';
    }
    return (`${header}: ` +
        entries.map(([key, value]) => `${key};${value}`).join(',') +
        '\n');
}
function header(key, value) {
    return value ? `${key}: ${value}\n` : '';
}
